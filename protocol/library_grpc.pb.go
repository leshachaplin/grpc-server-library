// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BookServiceClient is the client API for BookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookServiceClient interface {
	GetAllBooks(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetAllBooksResponse, error)
	GetBookByName(ctx context.Context, in *GetBookByNameRequest, opts ...grpc.CallOption) (*GetBookResponse, error)
	GetBookByAuthor(ctx context.Context, in *GetBooksByAuthorRequest, opts ...grpc.CallOption) (*GetBookResponse, error)
	AddBook(ctx context.Context, in *AddBookRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	DeleteBook(ctx context.Context, in *DeleteBookRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type bookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServiceClient(cc grpc.ClientConnInterface) BookServiceClient {
	return &bookServiceClient{cc}
}

var bookServiceGetAllBooksStreamDesc = &grpc.StreamDesc{
	StreamName: "GetAllBooks",
}

func (c *bookServiceClient) GetAllBooks(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetAllBooksResponse, error) {
	out := new(GetAllBooksResponse)
	err := c.cc.Invoke(ctx, "/protocol.BookService/GetAllBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var bookServiceGetBookByNameStreamDesc = &grpc.StreamDesc{
	StreamName: "GetBookByName",
}

func (c *bookServiceClient) GetBookByName(ctx context.Context, in *GetBookByNameRequest, opts ...grpc.CallOption) (*GetBookResponse, error) {
	out := new(GetBookResponse)
	err := c.cc.Invoke(ctx, "/protocol.BookService/GetBookByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var bookServiceGetBookByAuthorStreamDesc = &grpc.StreamDesc{
	StreamName: "GetBookByAuthor",
}

func (c *bookServiceClient) GetBookByAuthor(ctx context.Context, in *GetBooksByAuthorRequest, opts ...grpc.CallOption) (*GetBookResponse, error) {
	out := new(GetBookResponse)
	err := c.cc.Invoke(ctx, "/protocol.BookService/GetBookByAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var bookServiceAddBookStreamDesc = &grpc.StreamDesc{
	StreamName: "AddBook",
}

func (c *bookServiceClient) AddBook(ctx context.Context, in *AddBookRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/protocol.BookService/AddBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var bookServiceDeleteBookStreamDesc = &grpc.StreamDesc{
	StreamName: "DeleteBook",
}

func (c *bookServiceClient) DeleteBook(ctx context.Context, in *DeleteBookRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/protocol.BookService/DeleteBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServiceService is the service API for BookService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterBookServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type BookServiceService struct {
	GetAllBooks     func(context.Context, *EmptyRequest) (*GetAllBooksResponse, error)
	GetBookByName   func(context.Context, *GetBookByNameRequest) (*GetBookResponse, error)
	GetBookByAuthor func(context.Context, *GetBooksByAuthorRequest) (*GetBookResponse, error)
	AddBook         func(context.Context, *AddBookRequest) (*EmptyResponse, error)
	DeleteBook      func(context.Context, *DeleteBookRequest) (*EmptyResponse, error)
}

func (s *BookServiceService) getAllBooks(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetAllBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protocol.BookService/GetAllBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetAllBooks(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *BookServiceService) getBookByName(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetBookByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protocol.BookService/GetBookByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetBookByName(ctx, req.(*GetBookByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *BookServiceService) getBookByAuthor(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksByAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetBookByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protocol.BookService/GetBookByAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetBookByAuthor(ctx, req.(*GetBooksByAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *BookServiceService) addBook(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.AddBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protocol.BookService/AddBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.AddBook(ctx, req.(*AddBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *BookServiceService) deleteBook(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.DeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/protocol.BookService/DeleteBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteBook(ctx, req.(*DeleteBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterBookServiceService registers a service implementation with a gRPC server.
func RegisterBookServiceService(s grpc.ServiceRegistrar, srv *BookServiceService) {
	srvCopy := *srv
	if srvCopy.GetAllBooks == nil {
		srvCopy.GetAllBooks = func(context.Context, *EmptyRequest) (*GetAllBooksResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetAllBooks not implemented")
		}
	}
	if srvCopy.GetBookByName == nil {
		srvCopy.GetBookByName = func(context.Context, *GetBookByNameRequest) (*GetBookResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetBookByName not implemented")
		}
	}
	if srvCopy.GetBookByAuthor == nil {
		srvCopy.GetBookByAuthor = func(context.Context, *GetBooksByAuthorRequest) (*GetBookResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetBookByAuthor not implemented")
		}
	}
	if srvCopy.AddBook == nil {
		srvCopy.AddBook = func(context.Context, *AddBookRequest) (*EmptyResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method AddBook not implemented")
		}
	}
	if srvCopy.DeleteBook == nil {
		srvCopy.DeleteBook = func(context.Context, *DeleteBookRequest) (*EmptyResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method DeleteBook not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "protocol.BookService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "GetAllBooks",
				Handler:    srvCopy.getAllBooks,
			},
			{
				MethodName: "GetBookByName",
				Handler:    srvCopy.getBookByName,
			},
			{
				MethodName: "GetBookByAuthor",
				Handler:    srvCopy.getBookByAuthor,
			},
			{
				MethodName: "AddBook",
				Handler:    srvCopy.addBook,
			},
			{
				MethodName: "DeleteBook",
				Handler:    srvCopy.deleteBook,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "protocol/library.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewBookServiceService creates a new BookServiceService containing the
// implemented methods of the BookService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewBookServiceService(s interface{}) *BookServiceService {
	ns := &BookServiceService{}
	if h, ok := s.(interface {
		GetAllBooks(context.Context, *EmptyRequest) (*GetAllBooksResponse, error)
	}); ok {
		ns.GetAllBooks = h.GetAllBooks
	}
	if h, ok := s.(interface {
		GetBookByName(context.Context, *GetBookByNameRequest) (*GetBookResponse, error)
	}); ok {
		ns.GetBookByName = h.GetBookByName
	}
	if h, ok := s.(interface {
		GetBookByAuthor(context.Context, *GetBooksByAuthorRequest) (*GetBookResponse, error)
	}); ok {
		ns.GetBookByAuthor = h.GetBookByAuthor
	}
	if h, ok := s.(interface {
		AddBook(context.Context, *AddBookRequest) (*EmptyResponse, error)
	}); ok {
		ns.AddBook = h.AddBook
	}
	if h, ok := s.(interface {
		DeleteBook(context.Context, *DeleteBookRequest) (*EmptyResponse, error)
	}); ok {
		ns.DeleteBook = h.DeleteBook
	}
	return ns
}

// UnstableBookServiceService is the service API for BookService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableBookServiceService interface {
	GetAllBooks(context.Context, *EmptyRequest) (*GetAllBooksResponse, error)
	GetBookByName(context.Context, *GetBookByNameRequest) (*GetBookResponse, error)
	GetBookByAuthor(context.Context, *GetBooksByAuthorRequest) (*GetBookResponse, error)
	AddBook(context.Context, *AddBookRequest) (*EmptyResponse, error)
	DeleteBook(context.Context, *DeleteBookRequest) (*EmptyResponse, error)
}
